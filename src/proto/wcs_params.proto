/******************************************************************************
 *                                                                            *
 *    Copyright 2020   Lawrence Livermore National Security, LLC and other    *
 *    Whole Cell Simulator Project Developers. See the top-level COPYRIGHT    *
 *    file for details.                                                       *
 *                                                                            *
 *    SPDX-License-Identifier: MIT                                            *
 *                                                                            *
 ******************************************************************************/

syntax = "proto3";

package wcs_proto;

message WCS_Params {
  message Simulation_Params {
    // The seed for random number generator. Without this,
    // it will use a value dependent on the current system clock.
    uint32 seed = 1;

    // The maximum number of reaction iterations to run.
    uint32 max_iter = 2;
    // The upper limit of simulation time to run.
    double max_time = 3;

    enum SSA_Method {
      Direct = 0;
      NRM = 1;
      SOD = 2;
    }
    // SSA method to use: Direct, NRM, or SOD
    SSA_Method method = 4;

    enum Trajectory_Type {
      None = 0;
      Tracing = 1;
      Sampling = 2;
    }
    // Trajectory recording method: None, Tracing, or Sampling
    Trajectory_Type trajectory = 5;

    // Further sampling specifics in case of sampling
    oneof Sampling_Interval {
      uint32 sampling_interval_iter = 6;
      double sampling_interval_time = 7;
    }

    // Specify how many records to keep per temporary output file
    // fragment in tracing/sampling.
    uint32 frag_size = 8;
  
    // Name of the output file for tracing/sampling.
    string outfile = 9;
    // The name of the file to export the reaction network into
    // in the GraphViz format.
    string gvizfile = 10;
  }
  
  message Partition_Params {
    int32  n_parts = 1; ///< Number of partitions

    bool   cut_obj = 2; ///< Optimize edge-cut rather than communication volume
    bool   minconn = 3; ///< Minimize the maximum connectivity between subdomains
    bool   rm_coarse = 4; ///< Coarsening by random matching or by sorted heavy-edge matching

    // Maximum allowed load imbalance in 1/1000 scale
    int32  ufactor = 5;

    // Upper-bound of the range that a vertex weight will be linearly scaled
    // into such that it can be used as Metis input. This needs to be searched
    // by the trial-and-error as Metis is sensitive with the choice of the
    // range.
    int32  ub_vwgt = 6;

    // We define the quantity of edge-weight or communication volume as
    // inversely proportional to the vertex weight. This has a direct impact
    // on how the partitioning algorithm optimize for the objective.
    double vratio = 7;

    int32  n_iters = 8; ///< Number of refinement iterations
    int32  seed = 9;    ///< Random number seed
    int32  dbglvl = 10; ///< Metis debug level

    bool   verbose = 11; ///< Whether to show details
    string infile = 12;
    string outfile = 13;

    bool   run_embedded = 14; ///< Whether to run the hard-coded example
  }
  
  message DES_Params {
    int32 nlp = 1; ///< Number of LPs per processor
    string run_id = 2; ///< User supplied run name
  }

  Simulation_Params sim_setup = 1;
  Partition_Params part_setup = 2;
  DES_Params des_setup = 3;
}
